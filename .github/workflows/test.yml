name: Test and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
      
      - name: Run unit and integration tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose
      
      - name: Install cargo-tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
          use-tool-cache: true
      
      - name: Generate coverage report
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --verbose --out Xml --output-dir ./coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage/cobertura.xml
          fail_ci_if_error: true
      
      - name: Store coverage data
        run: |
          mkdir -p .project_meta/.integration/metrics
          cp ./coverage/cobertura.xml .project_meta/.integration/metrics/coverage_report.xml
          # Convert to JSON format for internal metrics tracking
          # This would use a script in a real implementation
          echo '{"overall_coverage": 0, "module_coverage": {}}' > .project_meta/.integration/metrics/coverage_report.json
      
      - name: Run benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: --verbose
      
      - name: Store benchmark results
        run: |
          mkdir -p .project_meta/.integration/metrics
          cp target/criterion/* .project_meta/.integration/metrics/ -r
      
  fuzz_testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      
      - name: Install cargo-fuzz
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-fuzz
          version: latest
          use-tool-cache: true
      
      - name: Run manifest fuzzer (limited duration)
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: run manifest_fuzzer -- -max_total_time=300
      
      - name: Run package fuzzer (limited duration)
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: run package_fuzzer -- -max_total_time=300
      
      - name: Store fuzzing results
        run: |
          mkdir -p .project_meta/.integration/metrics/fuzzing
          cp fuzz/artifacts/* .project_meta/.integration/metrics/fuzzing/ -r || true
          # Create a summary report
          echo '{"manifest_fuzzer_runs": 0, "package_fuzzer_runs": 0, "crashes_found": 0}' > .project_meta/.integration/metrics/fuzzing/summary.json

  compatibility_matrix:
    name: Compatibility Testing
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows-latest]
        rust: [stable, beta]
        tauri: [1.0.0, 1.1.0, 1.2.0]
    steps:
      - uses: actions/checkout@v2
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      
      - name: Run tests with Tauri ${{ matrix.tauri }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose
        env:
          TAURI_VERSION: ${{ matrix.tauri }}
      
      - name: Update compatibility matrix
        run: |
          mkdir -p .project_meta/.integration/reports
          # In a real implementation, this would update a JSON file with test results
          echo '{"windows": {"latest": {"tauri": {"1.0.0": "compatible", "1.1.0": "compatible", "1.2.0": "compatible"}}}}' > .project_meta/.integration/reports/compatibility_matrix.json
